@using Microsoft.JSInterop
@using Railwind.Common.Constants
@using Railwind.Enums
@using Railwind.Models
@inherits Railwind.Common.RailwindBaseComponent
@implements IAsyncDisposable
@typeparam T

<div class="rw-relative rw-z-10" role="dialog" aria-modal="true">
    <!--
      Background backdrop, show/hide based on modal state.
  
      Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0"
    -->
    <div class="@BackgroundClassName" aria-hidden="true"></div>

    <div class="@WrapperClassName">
        <!--
          Command palette, show/hide based on modal state.
    
          Entering: "ease-out duration-300"
            From: "opacity-0 scale-95"
            To: "opacity-100 scale-100"
          Leaving: "ease-in duration-200"
            From: "opacity-100 scale-100"
            To: "opacity-0 scale-95"
        -->
        <div class="@SearchWrapperClassName" @ref="CommandPaletteElement">
            <form @onsubmit="HandleSearchSubmit">
                <div class="rw-relative">
                    <svg
                        class="rw-pointer-events-none rw-absolute rw-left-4 rw-top-3.5 rw-h-5 rw-w-5 rw-text-indigo-500"
                        viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                        <path fill-rule="evenodd"
                              d="M9 3.5a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11ZM2 9a7 7 0 1 1 12.452 4.391l3.328 3.329a.75.75 0 1 1-1.06 1.06l-3.329-3.328A7 7 0 0 1 2 9Z"
                              clip-rule="evenodd"/>
                    </svg>
                    <input type="text"
                           value="@Value"
                           @oninput="OnInputChange"
                           class="rw-h-12 rw-w-full rw-border-0 rw-bg-transparent rw-pl-11 rw-pr-4 dark:rw-text-white dark:placeholder:rw-text-gray-200 rw-text-gray-900 placeholder:rw-text-gray-400 rw-focus:ring-0 rw-sm:text-sm"
                           placeholder="Search..."
                           role="combobox"
                           aria-expanded="false"
                           aria-controls="options">
                </div>
            </form>

            <!-- Results, show/hide based on command palette state -->
            @if (State == CommandPaletteState.HasContent)
            {
                <ul class="rw-max-h-128 md:rw-max-h-screen rw-scroll-py-2 rw-overflow-y-auto rw-py-2 rw-text-sm rw-text-gray-800"
                    id="options" role="listbox">
                    @foreach (var item in ItemsGrouped)
                    {
                        <li>
                            <h2 class="dark:rw-bg-indigo-800 dark:rw-text-white rw-px-4 rw-py-2.5 rw-text-xs rw-font-semibold rw-text-gray-900">@item.Key</h2>

                            @foreach (var commandPaletteItem in item)
                            {
                            <li @onclick="@(() => OnItemSelectedHandler(commandPaletteItem))"
                                class="@ItemClassName(commandPaletteItem.IsSelected, commandPaletteItem.IsSelectable)"
                                role="option" tabindex="-1">@commandPaletteItem.Title

                                @foreach (var tag in commandPaletteItem.Tags)
                                {
                                    <span
                                        class="rw-ms-2 rw-inline-flex rw-items-center rw-rounded-md rw-bg-green-500/10 rw-px-2 rw-py-1 rw-text-xs rw-font-medium rw-text-green-400 rw-ring-1 rw-ring-inset rw-ring-green-500/20">
                                        @tag
                                    </span>
                                }
                            </li>
                        }
                        </li>
                    }
                </ul>
            }

            @if (State == CommandPaletteState.Default)
            {
                <!-- Help, show/hide based on command palette state. -->
                <div class="rw-px-6 rw-py-14 rw-text-center rw-text-sm sm:rw-px-14">
                    <svg class="rw-mx-auto rw-h-6 rw-w-6 rw-text-gray-400" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M16.712 4.33a9.027 9.027 0 0 1 1.652 1.306c.51.51.944 1.064 1.306 1.652M16.712 4.33l-3.448 4.138m3.448-4.138a9.014 9.014 0 0 0-9.424 0M19.67 7.288l-4.138 3.448m4.138-3.448a9.014 9.014 0 0 1 0 9.424m-4.138-5.976a3.736 3.736 0 0 0-.88-1.388 3.737 3.737 0 0 0-1.388-.88m2.268 2.268a3.765 3.765 0 0 1 0 2.528m-2.268-4.796a3.765 3.765 0 0 0-2.528 0m4.796 4.796c-.181.506-.475.982-.88 1.388a3.736 3.736 0 0 1-1.388.88m2.268-2.268 4.138 3.448m0 0a9.027 9.027 0 0 1-1.306 1.652c-.51.51-1.064.944-1.652 1.306m0 0-3.448-4.138m3.448 4.138a9.014 9.014 0 0 1-9.424 0m5.976-4.138a3.765 3.765 0 0 1-2.528 0m0 0a3.736 3.736 0 0 1-1.388-.88 3.737 3.737 0 0 1-.88-1.388m2.268 2.268L7.288 19.67m0 0a9.024 9.024 0 0 1-1.652-1.306 9.027 9.027 0 0 1-1.306-1.652m0 0 4.138-3.448M4.33 16.712a9.014 9.014 0 0 1 0-9.424m4.138 5.976a3.765 3.765 0 0 1 0-2.528m0 0c.181-.506.475-.982.88-1.388a3.736 3.736 0 0 1 1.388-.88m-2.268 2.268L4.33 7.288m6.406 1.18L7.288 4.33m0 0a9.024 9.024 0 0 0-1.652 1.306A9.025 9.025 0 0 0 4.33 7.288"/>
                    </svg>
                    <p class="rw-mt-4 rw-font-semibold rw-text-gray-900 dark:rw-text-white">Where to get started?</p>
                    <p class="rw-mt-2 dark:rw-text-gray-200 rw-text-gray-500">@HelpSearchText</p>
                    <p class="rw-mt-2 rw-text-gray-500"></p>
                </div>
            }

            <!-- Empty state, show/hide based on command palette state -->
            @if (State == CommandPaletteState.IsEmpty)
            {
                <!-- Empty state, show/hide based on command palette state. -->
                <div class="rw-px-6 rw-py-14 rw-text-center rw-text-sm sm:rw-px-14">
                    <svg class="rw-mx-auto rw-h-6 rw-w-6 rw-text-gray-400" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"/>
                    </svg>
                    <p class="rw-mt-4 rw-font-semibold rw-text-gray-900">No results found</p>
                    <p class="rw-mt-2 dark:rw-text-white rw-text-gray-500">@NoResultsMessage</p>
                </div>
            }

            <!-- Empty state, show/hide based on command palette state -->
            @if (State == CommandPaletteState.Searching)
            {
                <!-- Empty state, show/hide based on command palette state. -->
                <div class="rw-px-6 rw-py-14 rw-text-center rw-text-sm sm:rw-px-14">
                    <Loader IsLoading="true" LoadingTextSize="text-lg" LoadingMessage="Searching" />
                </div>
            }


            @if (Items.Any() || !string.IsNullOrWhiteSpace(Value))
            {
                <div
                    class="rw-flex rw-flex-wrap rw-justify-between  rw-items-center rw-bg-gray-50 dark:rw-bg-gray-900 rw-px-4 rw-py-2.5">
                    <div
                        class="rw-select-none rw-w-full rw-rounded rw-flex rw-justify-center rw-items-center rw-px-4 rw-py-2 dark:rw-text-white  rw-cursor-pointer rw-bg-indigo-600">
                        Search
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {

    [Parameter] public string NoResultsMessage { get; set; } = string.Empty;

    [Parameter] public List<CommandPaletteItem<T>> Items { get; set; } = new List<CommandPaletteItem<T>>();

    [Parameter] public EventCallback<CommandPaletteItem<T>> OnItemSelected { get; set; }

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public EventCallback<string?> OnSearchChanged { get; set; }

    [Parameter] public string HelpSearchText { get; set; } = "";

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public CommandPaletteState State { get; set; } = CommandPaletteState.Default;

    [Parameter] public EventCallback OnSearchSubmit { get; set; }

    [Parameter] public EventCallback OnGoToSearchPage { get; set; }

    public IEnumerable<IGrouping<string, CommandPaletteItem<T>>> ItemsGrouped => Items.GroupBy(i => i.Key);

    private ElementReference CommandPaletteElement { get; set; }

    private Timer _debounceTimer;
    private int _debounceDelay = 300;

    private void OnItemSelectedHandler(CommandPaletteItem<T> item)
    {
        item.IsSelected = true;
        OnItemSelected.InvokeAsync(item);
    }

    private string ItemClassName(bool isActive, bool isSelectable) => ClassName(css =>
    {
        css.Add("rw-select-none rw-px-4 rw-py-2 dark:rw-text-white ");
        css.Add("rw-cursor-pointer hover:rw-bg-indigo-600", isSelectable);
        css.Add("rw-bg-indigo-600 rw-text-indigo-500", isActive && isSelectable);
    });

    private string SearchWrapperClassName => ClassName(css =>
    {
        css.Add("rw-mx-auto rw-max-w-xl rw-transform rw-divide-y rw-divide-gray-100 dark:rw-divide-indigo-700 rw-overflow-hidden rw-rounded-xl rw-ease-in-out rw-bg-white dark:rw-bg-gray-900 rw-shadow-2xl rw-ring-1 rw-ring-black rw-ring-opacity-5 rw-transition-all rw-duration-300");
        css.Add("rw-pointer-events-none rw-opacity-0 rw-scale-95", !IsActive);
        css.Add("rw-pointer-events-auto rw-opacity-100 rw-scale-100", IsActive);
    });

    private string BackgroundClassName => ClassName(css =>
    {
        css.Add("rw-fixed rw-inset-0 rw-bg-gray-500 dark:rw-bg-gray-800 rw-bg-opacity-25 dark:rw-bg-opacity-50 rw-transition-opacity rw-easy-in-out rw-duration-300");
        css.Add("rw-pointer-events-none rw-opacity-0", !IsActive);
        css.Add("rw-pointer-events-auto rw-opacity-100", IsActive);
    });

    private string WrapperClassName => ClassName(css =>
    {
        css.Add("rw-fixed rw-inset-0 rw-z-10 rw-w-screen rw-overflow-y-auto rw-p-4 sm:rw-p-6 md:rw-p-20");
        css.Add("rw-pointer-events-none ", !IsActive);
        css.Add("rw-pointer-events-auto", IsActive);
    });


    private void OnInputChange(ChangeEventArgs e)
    {
        // Stop any existing timer
        _debounceTimer?.Dispose();

        // Start a new timer
        _debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(() => UpdateValues(e)); // Call your API or search function
        }, null, _debounceDelay, Timeout.Infinite);
    }

    private void UpdateValues(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        ValueChanged.InvokeAsync(Value);
        OnSearchChanged.InvokeAsync(Value);
    }

    /// <summary>
    /// handles by calling invoking the OnSearchSubmit callback
    /// </summary>
    private async Task HandleSearchSubmit()
    {
        await OnSearchSubmit.InvokeAsync();
    }

    private async Task HandleGoToSearchPage()
    {
        await OnGoToSearchPage.InvokeAsync();
    }

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(CommandPaletteElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(CommandPaletteElement);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;

        Toggle();
    }


    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(CommandPaletteElement);
    }


}