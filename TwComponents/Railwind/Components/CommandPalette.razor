@using Microsoft.JSInterop
@using Railwind.Models
@inherits Railwind.Common.RailwindBaseComponent
@implements IAsyncDisposable

<div class="relative z-10" role="dialog" aria-modal="true">
    <!--
      Background backdrop, show/hide based on modal state.
  
      Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0"
    -->
    <div class="@BackgroundClassName" aria-hidden="true"></div>

    <div class="@WrapperClassName">
        <!--
          Command palette, show/hide based on modal state.
    
          Entering: "ease-out duration-300"
            From: "opacity-0 scale-95"
            To: "opacity-100 scale-100"
          Leaving: "ease-in duration-200"
            From: "opacity-100 scale-100"
            To: "opacity-0 scale-95"
        -->
        <div class="@SearchWrapperClassName" @ref="CommandPaletteElement">
            <div class="relative">
                <svg class="pointer-events-none absolute left-4 top-3.5 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                    <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11ZM2 9a7 7 0 1 1 12.452 4.391l3.328 3.329a.75.75 0 1 1-1.06 1.06l-3.329-3.328A7 7 0 0 1 2 9Z" clip-rule="evenodd"/>
                </svg>
                <input type="text"  
                       @oninput="OnInputChange" 
                       class="h-12 w-full border-0 bg-transparent pl-11 pr-4 dark:text-white dark:placeholder:text-gray-200 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm" 
                       placeholder="Search..." 
                       role="combobox" 
                       aria-expanded="false" 
                       aria-controls="options">
            </div>

            <!-- Results, show/hide based on command palette state -->
            <ul class="max-h-72 scroll-py-2 overflow-y-auto py-2 text-sm text-gray-800" id="options" role="listbox">
                @foreach (var item in Items)
                {
                    <li class="@ItemClassName(item.IsSelected)" role="option" tabindex="-1">@item.Title</li>
                }
                
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
            </ul>

            <!-- Empty state, show/hide based on command palette state -->
            @if (!Items.Any())
            {
                <p class="p-4 text-sm text-gray-500">@NoResultsMessage</p>
            }
        </div>
    </div>
</div>

@code {

    [Parameter] public string NoResultsMessage { get; set; } = string.Empty;

    [Parameter] public List<CommandPaletteItem> Items { get; set; } = new List<CommandPaletteItem>();
    [Parameter] public EventCallback<CommandPaletteItem> OnItemSelected { get; set; }
    
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private ElementReference CommandPaletteElement { get; set; }

    private void OnItemSelectedHandler(CommandPaletteItem item)
    {
        item.IsSelected = true;
        OnItemSelected.InvokeAsync(item);
    }

    private string ItemClassName(bool isActive) => ClassName(css =>
    {
        css.Add("cursor-default select-none px-4 py-2");
        css.Add("bg-indigo-600 text-white", isActive);
    });

    private string SearchWrapperClassName => ClassName(css =>
    {
          css.Add("mx-auto max-w-xl transform divide-y divide-gray-100 dark:divide-gray-700 overflow-hidden rounded-xl ease-in-out bg-white dark:bg-gray-900 shadow-2xl ring-1 ring-black ring-opacity-5 transition-all duration-300");
          css.Add("pointer-events-none opacity-0 scale-95", !IsActive);
          css.Add("pointer-events-auto opacity-100 scale-100", IsActive);
    });

    private string BackgroundClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 bg-gray-500 bg-opacity-25 transition-opacity easy-in-out duration-300");
        css.Add("pointer-events-none opacity-0", !IsActive);
        css.Add("pointer-events-auto opacity-100", IsActive);
    });
    
    private string WrapperClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20");
        css.Add("pointer-events-none ", !IsActive);
        css.Add("pointer-events-auto", IsActive);
    });
    
    private void OnInputChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        ValueChanged.InvokeAsync(Value);
    }

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(CommandPaletteElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(CommandPaletteElement);
        }
        
        StateHasChanged();
    }
    
    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;
        
        Toggle();
    }
    
    
    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(CommandPaletteElement);
    }
}