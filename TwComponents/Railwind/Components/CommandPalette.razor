@using Microsoft.JSInterop
@using Railwind.Common.Constants
@using Railwind.Enums
@using Railwind.Models
@inherits Railwind.Common.RailwindBaseComponent
@implements IAsyncDisposable
@typeparam T

<div class="relative z-30" role="dialog" aria-modal="true">
    <!--
      Background backdrop, show/hide based on modal state.
  
      Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0"
    -->
    <div class="@BackgroundClassName" aria-hidden="true"></div>

    <div class="@WrapperClassName">
        <!--
          Command palette, show/hide based on modal state.
    
          Entering: "ease-out duration-300"
            From: "opacity-0 scale-95"
            To: "opacity-100 scale-100"
          Leaving: "ease-in duration-200"
            From: "opacity-100 scale-100"
            To: "opacity-0 scale-95"
        -->
        <div class="@SearchWrapperClassName" @ref="CommandPaletteElement">
            <form @onsubmit="HandleSearchSubmit">
                <div class="relative">
                    <svg
                        class="pointer-events-none absolute left-4 top-3.5 h-5 w-5 text-indigo-500"
                        viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                        <path fill-rule="evenodd"
                              d="M9 3.5a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11ZM2 9a7 7 0 1 1 12.452 4.391l3.328 3.329a.75.75 0 1 1-1.06 1.06l-3.329-3.328A7 7 0 0 1 2 9Z"
                              clip-rule="evenodd"/>
                    </svg>
                    <input type="text"
                           value="@Value"
                           @oninput="OnInputChange"
                           class="h-12 w-full border-0 bg-transparent pl-11 pr-4 dark:text-white dark:placeholder:text-stone-200 text-stone-900 placeholder:text-stone-400 focus:ring-0 sm:text-sm"
                           placeholder="Search..."
                           role="combobox"
                           aria-expanded="false"
                           aria-controls="options">
                </div>
            </form>

            <!-- Results, show/hide based on command palette state -->
            @if (State == CommandPaletteState.HasContent)
            {
                <ul class="max-h-128 md:max-h-svh	scroll-py-2 overflow-y-auto py-2 text-sm text-stone-800"
                    id="options" role="listbox">
                    @foreach (var item in ItemsGrouped)
                    {
                        <li>
                            <h2 class="dark:bg-indigo-800 dark:text-white px-4 py-2.5 text-xs font-semibold text-stone-900">@item.Key</h2>

                            @foreach (var commandPaletteItem in item)
                            {
                            <li @onclick="@(() => OnItemSelectedHandler(commandPaletteItem))"
                                class="@ItemClassName(commandPaletteItem.IsSelected, commandPaletteItem.IsSelectable)"
                                role="option" tabindex="-1">@commandPaletteItem.Title

                                @foreach (var tag in commandPaletteItem.Tags)
                                {
                                    <span
                                        class="ms-2 inline-flex items-center rounded-md bg-green-500/10 px-2 py-1 text-xs font-medium text-green-400 ring-1 ring-inset ring-green-500/20">
                                        @tag
                                    </span>
                                }
                            </li>
                        }
                        </li>
                    }
                </ul>
            }

            @if (State == CommandPaletteState.Default)
            {
                <!-- Help, show/hide based on command palette state. -->
                <div class="px-6 py-14 text-center text-sm sm:px-14">
                    <svg class="mx-auto h-6 w-6 text-stone-400" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M16.712 4.33a9.027 9.027 0 0 1 1.652 1.306c.51.51.944 1.064 1.306 1.652M16.712 4.33l-3.448 4.138m3.448-4.138a9.014 9.014 0 0 0-9.424 0M19.67 7.288l-4.138 3.448m4.138-3.448a9.014 9.014 0 0 1 0 9.424m-4.138-5.976a3.736 3.736 0 0 0-.88-1.388 3.737 3.737 0 0 0-1.388-.88m2.268 2.268a3.765 3.765 0 0 1 0 2.528m-2.268-4.796a3.765 3.765 0 0 0-2.528 0m4.796 4.796c-.181.506-.475.982-.88 1.388a3.736 3.736 0 0 1-1.388.88m2.268-2.268 4.138 3.448m0 0a9.027 9.027 0 0 1-1.306 1.652c-.51.51-1.064.944-1.652 1.306m0 0-3.448-4.138m3.448 4.138a9.014 9.014 0 0 1-9.424 0m5.976-4.138a3.765 3.765 0 0 1-2.528 0m0 0a3.736 3.736 0 0 1-1.388-.88 3.737 3.737 0 0 1-.88-1.388m2.268 2.268L7.288 19.67m0 0a9.024 9.024 0 0 1-1.652-1.306 9.027 9.027 0 0 1-1.306-1.652m0 0 4.138-3.448M4.33 16.712a9.014 9.014 0 0 1 0-9.424m4.138 5.976a3.765 3.765 0 0 1 0-2.528m0 0c.181-.506.475-.982.88-1.388a3.736 3.736 0 0 1 1.388-.88m-2.268 2.268L4.33 7.288m6.406 1.18L7.288 4.33m0 0a9.024 9.024 0 0 0-1.652 1.306A9.025 9.025 0 0 0 4.33 7.288"/>
                    </svg>
                    <p class="mt-4 font-semibold text-stone-900 dark:text-white">Where to get started?</p>
                    <p class="mt-2 dark:text-stone-200 text-stone-500">@HelpSearchText</p>
                    <p class="mt-2 text-stone-500"></p>
                </div>
            }

            <!-- Empty state, show/hide based on command palette state -->
            @if (State == CommandPaletteState.IsEmpty)
            {
                <!-- Empty state, show/hide based on command palette state. -->
                <div class="px-6 py-14 text-center text-sm sm:px-14">
                    <svg class="mx-auto h-6 w-6 text-stone-400" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"/>
                    </svg>
                    <p class="mt-4 font-semibold text-stone-900 dark:text-white">No results found</p>
                    <p class="mt-2 dark:text-white text-stone-500">@NoResultsMessage</p>
                </div>
            }

            <!-- Empty state, show/hide based on command palette state -->
            @if (State == CommandPaletteState.Searching)
            {
                <!-- Empty state, show/hide based on command palette state. -->
                <div class="px-6 py-14 text-center text-sm sm:px-14">
                    <Loader IsLoading="true" LoadingTextSize="text-lg" LoadingMessage="Searching" />
                </div>
            }


            @if (Items.Any() || !string.IsNullOrWhiteSpace(Value))
            {
                <div
                    class="flex flex-wrap justify-between  items-center bg-stone-50 dark:bg-stone-900 px-4 py-2.5">
                    <button @onclick="OnSearchSubmit"
                        class="select-none w-full rounded flex justify-center items-center px-4 py-2 text-white  cursor-pointer bg-indigo-600">
                        Search
                    </button>
                </div>
            }

        </div>
    </div>
</div>

@code {

    [Parameter] public string NoResultsMessage { get; set; } = string.Empty;

    [Parameter] public List<CommandPaletteItem<T>> Items { get; set; } = new List<CommandPaletteItem<T>>();

    [Parameter] public EventCallback<CommandPaletteItem<T>> OnItemSelected { get; set; }

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public EventCallback<string?> OnSearchChanged { get; set; }

    [Parameter] public string HelpSearchText { get; set; } = "";

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public CommandPaletteState State { get; set; } = CommandPaletteState.Default;

    [Parameter] public EventCallback OnSearchSubmit { get; set; }

    [Parameter] public EventCallback OnGoToSearchPage { get; set; }

    public IEnumerable<IGrouping<string, CommandPaletteItem<T>>> ItemsGrouped => Items.GroupBy(i => i.Key);

    private ElementReference CommandPaletteElement { get; set; }

    private Timer _debounceTimer;
    private int _debounceDelay = 300;

    private void OnItemSelectedHandler(CommandPaletteItem<T> item)
    {
        item.IsSelected = true;
        OnItemSelected.InvokeAsync(item);
    }

    private string ItemClassName(bool isActive, bool isSelectable) => ClassName(css =>
    {
        css.Add("select-none px-4 py-2 text-stone-600 dark:text-white ");
        css.Add("cursor-pointer hover:bg-stone-300 dark:hover:bg-stone-600", isSelectable);
        css.Add(" dark:bg-stone-800 font-semibold", isActive && isSelectable);
    });

    private string SearchWrapperClassName => ClassName(css =>
    {
        css.Add("mx-auto max-w-xl transform divide-y divide-stone-100 dark:divide-stone-700 overflow-hidden rounded-xl ease-in-out bg-white dark:bg-stone-900 shadow-2xl ring-1 ring-black ring-opacity-5 transition-all duration-300");
        css.Add("pointer-events-none opacity-0 scale-95", !IsActive);
        css.Add("pointer-events-auto opacity-100 scale-100", IsActive);
    });

    private string BackgroundClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 bg-stone-500 dark:bg-stone-800 bg-opacity-25 dark:bg-opacity-50 transition-opacity easy-in-out duration-300");
        css.Add("pointer-events-none opacity-0", !IsActive);
        css.Add("pointer-events-auto opacity-100", IsActive);
    });

    private string WrapperClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20");
        css.Add("pointer-events-none ", !IsActive);
        css.Add("pointer-events-auto", IsActive);
    });


    private void OnInputChange(ChangeEventArgs e)
    {
        UpdateValues(e);
    }

    private void UpdateValues(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        ValueChanged.InvokeAsync(Value);
        
        // Stop any existing timer
        _debounceTimer?.Dispose();

        // Start a new timer
        _debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(() => OnSearchChanged.InvokeAsync(Value)); // Call your API or search function
        }, null, _debounceDelay, Timeout.Infinite);
        
    }

    /// <summary>
    /// handles by calling invoking the OnSearchSubmit callback
    /// </summary>
    private async Task HandleSearchSubmit()
    {
        await OnSearchSubmit.InvokeAsync();
    }

    private async Task HandleGoToSearchPage()
    {
        await OnGoToSearchPage.InvokeAsync();
    }

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(CommandPaletteElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(CommandPaletteElement);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;

        Toggle();
    }


    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(CommandPaletteElement);
    }


}