@inherits Railwind.Common.RailwindBaseComponent
@using Microsoft.JSInterop
@using Railwind.Common.Enums
@implements IAsyncDisposable

<div class="relative inline-block text-left">
    <div>
        @if (ButtonContent is null)
        {
            <MyButton OnClicked="Toggle" ColorVariant="ColorVariant.Accent" StyleVariant="Common.Enums.StyleVariant.Outlined">
                Options
                <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"
                     aria-hidden="true" data-slot="icon">
                    <path fill-rule="evenodd"
                          d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
                          clip-rule="evenodd"/>
                </svg>
            </MyButton>
        }
        else
        {
            @ButtonContent
        }
    </div>

    <!--
      Dropdown menu, show/hide based on menu state.
  
      Entering: "transition ease-out duration-100"
        From: "transform opacity-0 scale-95"
        To: "transform opacity-100 scale-100"
      Leaving: "transition ease-in duration-75"
        From: "transform opacity-100 scale-100"
        To: "transform opacity-0 scale-95"
    -->
    <div @ref="DropdownContentElement" class="@DropdownContentClass" role="menu" aria-orientation="vertical"
         aria-labelledby="menu-button" tabindex="-1">
        <div>
            @DropdownContent
        </div>
    </div>
</div>


@code {
    public ElementReference DropdownContentElement { get; set; }

    [Parameter] public RenderFragment? ButtonContent { get; set; }
    [Parameter] public RenderFragment? DropdownContent { get; set; }

    /// <summary>
    /// Use this parameter to pass in custom tailwind for sizing the dropdown.
    /// </summary>
    // [Parameter] public string TailwindSize { get; set; } = "w-fit";

    private string DropdownContentClass => ClassName(css =>
    {
        // css.Add("overflow-y-auto -right-[4.25rem] md:right-1 min-h-svh max-h-svh min-w-[335px] md:min-w-96 absolute z-10 mt-2 origin-top-right divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none transform transition ease-in-out duration-200");
        css.Add(" transform transition ease-in-out duration-200");
        css.Add("opacity-0 scale-95 pointer-events-none", !IsActive);
        // css.Add(TailwindSize);
        css.Add("opacity-100 scale-100", IsActive);
    });

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(DropdownContentElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(DropdownContentElement);
        }

        StateHasChanged();
    }
    
    public void Open()
    {
        if (IsActive) return;
        
        IsActive = true;
        
        EventsJsInterop.AddEventListener(DropdownContentElement, this);
        
        StateHasChanged();
    }


    public void Close()
    {
        if (!IsActive) return;
        
        IsActive = false;
        
        EventsJsInterop.RemoveEventListener(DropdownContentElement);
        
        StateHasChanged();
    }

    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;

        Toggle();
    }

    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(DropdownContentElement);
    }

}