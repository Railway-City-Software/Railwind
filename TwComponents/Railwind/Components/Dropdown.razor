@inherits Railwind.Common.RailwindBaseComponent
@using Microsoft.JSInterop
@implements IAsyncDisposable

<div class="rw-relative rw-inline-block rw-text-left">
    <div>
        @if (ButtonContent is null)
        {
            <button @onclick="Toggle" type="button"
                    class="rw-inline-flex rw-w-full rw-justify-center rw-gap-x-1.5 rw-rounded-md rw-bg-white rw-px-3 rw-py-2 rw-text-sm rw-font-semibold rw-text-gray-900 rw-shadow-sm rw-ring-1 rw-ring-inset rw-ring-gray-300 hover:rw-bg-gray-50"
                    id="menu-button" aria-expanded="true" aria-haspopup="true">
                Options
                <svg class="-rw-mr-1 rw-h-5 rw-w-5 rw-text-gray-400" viewBox="0 0 20 20" fill="currentColor"
                     aria-hidden="true" data-slot="icon">
                    <path fill-rule="evenodd"
                          d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
                          clip-rule="evenodd"/>
                </svg>
            </button>
        }
        else
        {
            @ButtonContent
        }
    </div>

    <!--
      Dropdown menu, show/hide based on menu state.
  
      Entering: "transition ease-out duration-100"
        From: "transform opacity-0 scale-95"
        To: "transform opacity-100 scale-100"
      Leaving: "transition ease-in duration-75"
        From: "transform opacity-100 scale-100"
        To: "transform opacity-0 scale-95"
    -->
    <div @ref="DropdownContentElement" class="@DropdownContentClass" role="menu" aria-orientation="vertical"
         aria-labelledby="menu-button" tabindex="-1">
        <div>
            @DropdownContent
        </div>
    </div>
</div>


@code {
    public ElementReference DropdownContentElement { get; set; }

    [Parameter] public RenderFragment? ButtonContent { get; set; }
    [Parameter] public RenderFragment? DropdownContent { get; set; }

    /// <summary>
    /// Use this parameter to pass in custom tailwind for sizing the dropdown.
    /// </summary>
    // [Parameter] public string TailwindSize { get; set; } = "rw-w-fit";

    private string DropdownContentClass => ClassName(css =>
    {
        // css.Add("rw-overflow-y-auto -rw-right-[4.25rem] md:rw-right-1 rw-min-h-svh rw-max-h-svh rw-min-w-[335px] md:rw-min-w-96 rw-absolute rw-z-10 rw-mt-2 rw-origin-top-right rw-divide-y rw-divide-gray-100 rw-rounded-md rw-shadow-lg rw-ring-1 rw-ring-black rw-ring-opacity-5 focus:rw-outline-none rw-transform rw-transition rw-ease-in-out rw-duration-200");
        css.Add(" rw-transform rw-transition rw-ease-in-out rw-duration-200");
        css.Add("rw-opacity-0 rw-scale-95 rw-pointer-events-none", !IsActive);
        // css.Add(TailwindSize);
        css.Add("rw-opacity-100 rw-scale-100", IsActive);
    });

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(DropdownContentElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(DropdownContentElement);
        }

        StateHasChanged();
    }
    
    public void Open()
    {
        if (IsActive) return;
        
        IsActive = true;
        
        EventsJsInterop.AddEventListener(DropdownContentElement, this);
        
        StateHasChanged();
    }


    public void Close()
    {
        if (!IsActive) return;
        
        IsActive = false;
        
        EventsJsInterop.RemoveEventListener(DropdownContentElement);
        
        StateHasChanged();
    }

    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;

        Toggle();
    }

    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(DropdownContentElement);
    }

}