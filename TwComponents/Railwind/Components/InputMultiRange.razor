<div class="relative w-full">
    <!-- Lower Range Slider -->
    <input id="range-min" 
           type="range" 
           step="@Step" 
           min="@MinRange"
           max="@MaxRange" 
           value="@MinValue"
           @oninput="HandleMinValueChanged"
           class="absolute top-0 left-0 w-full h-2 bg-transparent appearance-none cursor-pointer pointer-events-none">
    <!-- Upper Range Slider -->
    <input id="range-max" 
           type="range" 
           step="@Step" 
           min="@MinRange" 
           max="@MaxRange" 
           value="@MaxValue"
           @oninput="HandleMaxValueChanged"
           class="absolute top-0 left-0 w-full h-2 bg-transparent appearance-none cursor-pointer pointer-events-none">
    <div class="w-full h-2 bg-gray-200 dark:bg-gray-900 rounded-lg"></div>
</div>

<style>
    /* Custom styles to show the selected range between two sliders */
    #range-min, #range-max {
        -webkit-appearance: none;
        appearance: none;
        position: absolute;
    }
    #range-min::-webkit-slider-thumb, #range-max::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 16px;
        height: 16px;
        background-color: #4A90E2;
        border-radius: 50%;
        pointer-events: all;
        cursor: pointer;
    }
    /* Add more styles for Firefox, Edge, etc., if needed */
</style>


@code {

    [Parameter] public int MinValue { get; set; } = 3;
    [Parameter] public EventCallback<int> MinValueChanged { get; set; }

    [Parameter] public int MaxValue { get; set; } = 20;
    [Parameter] public EventCallback<int> MaxValueChanged { get; set; }

    [Parameter] public int Step { get; set; } = 1;

    [Parameter] public int MinRange { get; set; } = 0;
    [Parameter] public int MaxRange { get; set; } = 10;
    
    private async Task HandleMinValueChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newValue))
        {
            // ensure the min value is less than the max value
            if (newValue > MaxValue) return;
            
            MinValue = newValue;
            await MinValueChanged.InvokeAsync(MinValue);
        }
    }

    private async Task HandleMaxValueChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newValue))
        {
            // ensure the min value is less than the max value
            if (newValue < MinValue) return;
            
            MaxValue = newValue;
            await MaxValueChanged.InvokeAsync(MaxValue);
        }
    }
}