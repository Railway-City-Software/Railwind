@using Microsoft.JSInterop
@using Railwind.Enums
@inherits Railwind.Common.RailwindBaseComponent
@implements IAsyncDisposable

<div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <!--
      Background backdrop, show/hide based on modal state.
  
      Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0"
    -->
    <div class="@BackgroundClassName" aria-hidden="true"></div>

    <div class="@WrapperClassName">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <!--
              Modal panel, show/hide based on modal state.
      
              Entering: "ease-out duration-300"
                From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                To: "opacity-100 translate-y-0 sm:scale-100"
              Leaving: "ease-in duration-200"
                From: "opacity-100 translate-y-0 sm:scale-100"
                To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            -->
            <div class="@ModalClassName" @ref="ModalElement">
                <div>
                    <div class="@IconWrapperClassName ">
                        <i class="@IconClassName"></i>
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold text-gray-900 dark:text-white" id="modal-title">@Title</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500 dark:text-gray-400">@Message</p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    @if (OnPrimaryClicked.HasDelegate)
                    {
                        <button @onclick="HandlePrimaryClick" type="button" class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2">
                            @PrimaryText
                        </button>
                    }
                    @if (OnSecondaryClicked.HasDelegate)
                    {
                        <button @onclick="HandleSecondaryClick" type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white dark:bg-gray-800 dark:text-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 dark:hover:bg-gray-700 hover:bg-gray-50 sm:col-start-1 sm:mt-0">
                            @SecondaryText
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter] public string Title { get; set; } = string.Empty;

    [Parameter] public string Message { get; set; } = string.Empty;

    [Parameter] public ModalState State { get; set; }
    
    [Parameter] public string SecondaryText { get; set; } = "Cancel";
    [Parameter] public string PrimaryText { get; set; } = "Submit";

    [Parameter] public EventCallback OnSecondaryClicked { get; set; }
    [Parameter] public EventCallback OnPrimaryClicked { get; set; }

    private ElementReference ModalElement { get; set; }

    private string BackgroundClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-25 bg-opacity-75 transition-opacity easy-in-out duration-300");
        css.Add("pointer-events-none opacity-0", !IsActive);
        css.Add("pointer-events-auto opacity-100", IsActive);
    });

    private string WrapperClassName => ClassName(css =>
    {
        css.Add("fixed inset-0 z-10 w-screen overflow-y-auto");
        css.Add("pointer-events-none", !IsActive);
        css.Add("pointer-events-auto", IsActive);
    });

    private string ModalClassName => ClassName(css =>
    {
        css.Add("relative transform transition-all duration-300 overflow-hidden rounded-lg bg-white dark:bg-gray-900 px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6");
        css.Add("pointer-events-none opacity-0 sm:scale-95", !IsActive);
        css.Add("pointer-events-auto opacity-100 sm:scale-100", IsActive);
    });

    private string IconWrapperClassName => ClassName(css =>
    {
        css.Add("mx-auto flex h-12 w-12 items-center justify-center rounded-full");
        switch (State)
        {
            case ModalState.Success:
                css.Add("bg-green-100 dark:bg-green-400");
                break;
                
            case ModalState.Info:
                css.Add("bg-green-100 dark:bg-green-100");
                break;
                
            case ModalState.Warning:
                css.Add("bg-amber-100 dark:bg-amber-100");
                break;
                
            case ModalState.Error:
                css.Add("bg-red-100 dark:bg-red-100");
                break;
                
            default:
                css.Add("bg-gray-100 dark:bg-gray-100");
                break;
        }
    });

    private string IconClassName =>
        State switch
        {
            ModalState.Success => "ki-outline ki-check-circle text-green-600 text-4xl",
            ModalState.Info => "ki-outline ki-information-2 text-slate-600 text-4xl",
            ModalState.Warning => "ki-outline ki-information-5 text-amber-600 text-4xl",
            ModalState.Error => "ki-outline ki-cross-circle text-red-600 text-4xl",
            _ => "ki-outline ki-information-2 text-gray-600 text-4xl"
        };


    private async Task HandlePrimaryClick()
    {
        await OnPrimaryClicked.InvokeAsync();
    }

    private async Task HandleSecondaryClick()
    {
        await OnSecondaryClicked.InvokeAsync();
    }

    public void Toggle()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            EventsJsInterop.AddEventListener(ModalElement, this);
        }

        else
        {
            EventsJsInterop.RemoveEventListener(ModalElement);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public override void OnClickedOutside()
    {
        if (!IsActive) return;

        Toggle();
    }


    // Ensure the listener is removed if the component is disposed
    public async ValueTask DisposeAsync()
    {
        await EventsJsInterop.RemoveEventListener(ModalElement);
    }

}