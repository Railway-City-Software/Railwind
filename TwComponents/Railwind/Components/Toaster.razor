@using Railwind.Common
@using Railwind.Common.Enums
@inject ToasterService ToastService
@implements IDisposable

<!-- Global notification live region, render this permanently at the end of the document -->
<div aria-live="assertive" class="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:items-start sm:p-6 z-50">
    <div class="flex w-full flex-col space-y-4 items-end">
        <!--
          Notification panel, dynamically insert this into the live region when it needs to be displayed
    
          Entering: "transform ease-out duration-300 transition"
            From: "translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
            To: "translate-y-0 opacity-100 sm:translate-x-0"
          Leaving: "transition ease-in duration-100"
            From: "opacity-100"
            To: "opacity-0"
        -->
        <!-- For each toast -->
        @foreach (var toast in Toasts.ToList())
        {
            <div class="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg dark:bg-gray-900 shadow-lg ring-1 ring-black ring-opacity-5">
                <div class="p-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <i class="text-2xl @GetIconClass(toast.Severity)"></i>

                            @* <svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon"> *@
                            @*     <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/> *@
                            @* </svg> *@
                        </div>
                        <div class="ml-3 w-0 flex-1 pt-0.5">
                            <p class="text-sm font-medium text-white">@toast.Title</p>
                            <p class="mt-1 text-sm text-gray-300">@toast.Message</p>
                        </div>
                        <div class="ml-4 flex flex-shrink-0">
                            <button type="button" @onclick="@(() => DismissToast(toast.Id))" class="inline-flex rounded-md bg-gray-900 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                <span class="sr-only">Close</span>
                                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                                    <path d="M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Toast> Toasts { get; set; } = new();
    private System.Timers.Timer? _toastTimer;

    protected override void OnInitialized()
    {
        ToastService.OnToastCreate += AddToast;

        // Initialize a timer to check for expired toasts every second
        _toastTimer = new System.Timers.Timer(1000);
        _toastTimer.Elapsed += CheckExpiredToasts;
        _toastTimer.AutoReset = true;
        _toastTimer.Start();
    }

    private void AddToast(Toast toast)
    {
        // Set an expiration time based on the duration
        toast.UtcExpirationTime = DateTime.UtcNow.AddMilliseconds(toast.Duration);
        // in the event we do not want the toast to expire, set the expiration time to max value
        if(!toast.DoesExpire) toast.UtcExpirationTime = DateTime.MaxValue;
        Toasts.Add(toast);
        InvokeAsync(StateHasChanged);
    }

    private void CheckExpiredToasts(object? sender, System.Timers.ElapsedEventArgs e)
    {
        // Find expired toasts and remove them
        var expiredToasts = Toasts.Where(t => t.UtcExpirationTime <= DateTime.UtcNow).ToList();
        if (expiredToasts.Any())
        {
            foreach (var toast in expiredToasts)
            {
                Toasts.Remove(toast);
            }
            InvokeAsync(StateHasChanged);
        }
    }

    private void DismissToast(Guid id)
    {
        var toast = Toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            Toasts.Remove(toast);
            InvokeAsync(StateHasChanged);
        }
    }

    private string GetIconClass(ToastSeverity severity)
    {
        return severity switch
        {
            ToastSeverity.Success => "ki-outline ki-check-circle text-green-400",
            ToastSeverity.Info => "ki-outline ki-information-2 text-slate-400",
            ToastSeverity.Warning => "ki-outline ki-information-5 text-amber-400",
            ToastSeverity.Error => "ki-outline ki-cross-circle text-red-400",
            _ => "ki-outline ki-information-2 text-gray-400"
        };
    }

    public void Dispose()
    {
        ToastService.OnToastCreate -= AddToast;

        // Stop and dispose of the timer
        if (_toastTimer != null)
        {
            _toastTimer.Stop();
            _toastTimer.Elapsed -= CheckExpiredToasts;
            _toastTimer.Dispose();
        }
    }
}
