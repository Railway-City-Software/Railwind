@inherits Railwind.Common.RailwindBaseComponent

<!-- Enabled: "bg-indigo-600", Not Enabled: "bg-gray-200" -->
<button type="button" @onclick="HandleValueChanged" class="@ButtonClassName" role="switch" aria-checked="false">
    <!-- Enabled: "translate-x-5", Not Enabled: "translate-x-0" -->
    <span class="@TranslateClassName">
        <!-- Enabled: "opacity-0 duration-100 ease-out", Not Enabled: "opacity-100 duration-200 ease-in" -->
        @if (!Value)
        {
            <span class="@PrimaryIconClassName">
              <svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 12 12">
                <path d="M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                      stroke-linejoin="round"/>
              </svg>
            </span>
        }
        @if (Value)
        {
            <!-- Enabled: "opacity-100 duration-200 ease-in", Not Enabled: "opacity-0 duration-100 ease-out" -->
            <span class="@SecondaryIconClassName">
          <svg class="h-4 w-4 text-indigo-600" fill="currentColor" viewBox="0 0 12 12">
            <path
                d="M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z"/>
          </svg>
        </span>
        }
  </span>
</button>


@code {

    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }

    private void HandleValueChanged()
    {
        Value = !Value;
        ValueChanged.InvokeAsync(Value);

    }

    private string ButtonClassName => ClassName(css =>
    {
        css.Add("relative items-center inline-flex h-6 w-11 shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none " +
                "focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2");
        css.Add("bg-indigo-600", Value);
        css.Add("bg-gray-200", !Value);
    });

    private string TranslateClassName => ClassName(css =>
    {
        css.Add("pointer-events-none relative inline-block size-5  transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out");
        css.Add("translate-x-5", Value);
        css.Add("translate-x-0", !Value);
    });

    private string PrimaryIconClassName => ClassName(css =>
    {
        css.Add("inset-0 flex size-full items-center justify-center  transition-opacity ");
        css.Add("opacity-0 duration-100 ease-out", Value);
        css.Add("opacity-100 duration-200 ease-in", !Value);
    });

    private string SecondaryIconClassName => ClassName(css =>
    {
        css.Add("inset-0 flex size-full items-center justify-center  transition-opacity");
        css.Add("opacity-0 duration-100 ease-out", !Value);
        css.Add("opacity-100 duration-200 ease-in", Value);
    });

}