@using System.ComponentModel
@using Railwind.Common.Enums
@using Railwind.Common.Enums.Tailwind
@using Railwind.Common.Extensions
@using Railwind.Enums
@inherits BaseTypography

@switch (Type)
{
    case TypographyType.H1:
        <h1 class="@TypographyClassName">
            @ChildContent
        </h1>
        break;
    case TypographyType.H2:
        <h2 class="@TypographyClassName">
            @ChildContent
        </h2>
        break;
    case TypographyType.H3:
        <h3 class="@TypographyClassName">
            @ChildContent
        </h3>
        break;
    case TypographyType.H4:
        <h4 class="@TypographyClassName">
            @ChildContent
        </h4>
        break;
    case TypographyType.H5:
        <h5 class="@TypographyClassName">
            @ChildContent
        </h5>
        break;
    case TypographyType.H6:
        <h6 class="@TypographyClassName">
            @ChildContent
        </h6>
        break;
    case TypographyType.P:
        <p class="@TypographyClassName">
            @ChildContent
        </p>
        break;
}

@code {
    [Parameter, EditorRequired] public TypographyType Type { get; set; } = TypographyType.P;

    protected override void OnInitialized()
    {
        Size ??= GetFontSize();
        FontWeight ??= GetFontWeight();
        ColorExpression ??= c => MyFontColor.ToTextColorWeight800();
    }

  private Func<Colors, string> GetColorExpression()
    {
        return Type switch
        {
            TypographyType.H1 => c => c.ToTextColorWeight800(),
            TypographyType.H2 => c => c.ToTextColorWeight800(),
            TypographyType.H3 => c => c.ToTextColorWeight800(),
            TypographyType.H4 => c => c.ToTextColorWeight800(),
            TypographyType.H5 => c => c.ToTextColorWeight800(),
            TypographyType.H6 => c => c.ToTextColorWeight800(),
            TypographyType.P  => c => c.ToTextColorWeight800(),
            _ => c => c.ToTextColorWeight800()
        };
    }

    private Sizing GetFontSize()
    {
        return Size ?? Type switch
        {
            TypographyType.H1 => Sizing.FourXl,
            TypographyType.H2 => Sizing.ThreeXl,
            TypographyType.H3 => Sizing.TwoXl,
            TypographyType.H4 => Sizing.Xl,
            TypographyType.H5 => Sizing.Lg,
            TypographyType.H6 => Sizing.Md,
            _ => Sizing.Md
        };
    }
    
    private FontWeight GetFontWeight()
    {
        return FontWeight ?? Type switch
        {
            TypographyType.H1 => Enums.FontWeight.Bold,
            TypographyType.H2 => Enums.FontWeight.Bold,
            TypographyType.H3 => Enums.FontWeight.SemiBold,
            TypographyType.H4 => Enums.FontWeight.SemiBold,
            TypographyType.H5 => Enums.FontWeight.SemiBold,
            TypographyType.H6 => Enums.FontWeight.SemiBold,
            _ => Enums.FontWeight.Normal
        };
    }
    
    private Weight GetColorWeight()
    {
        return Type switch
        {
            TypographyType.H1 => Weight.Weight950,
            TypographyType.H2 => Weight.Weight900,
            TypographyType.H3 => Weight.Weight900,
            TypographyType.H4 => Weight.Weight900,
            TypographyType.H5 => Weight.Weight900,
            TypographyType.H6 => Weight.Weight900,
            TypographyType.P  => Weight.Weight800,
            _ => Weight.Weight950
        };
    }

}