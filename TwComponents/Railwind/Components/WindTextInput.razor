@inherits Railwind.Common.RailwindBaseComponent

<div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="rw-block rw-text-sm rw-font-medium rw-leading-6 dark:rw-text-white rw-text-gray-900">@Label</label>
    }
    <div class="mt-2">
        <input type="@InputType"
               id="@Id"
               @oninput="OnInputChange"
               value="@Value"
               placeholder="@Placeholder"
               disabled="@IsDisabled"
               class="@InputClassName">
    </div>
    @if (!string.IsNullOrWhiteSpace(Description))
    {
        <p class="rw-mt-2 rw-text-sm dark:rw-text-white/90 rw-text-gray-500" id="@($"{Id}-description")">@Description</p>
    }
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public string InputType { get; set; } = "text";
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public bool IsDisabled { get; set; } = false;
    
    // Debounce -- This exists to be more compatible with Server hosted Blazor since otherwise latency issues occur in production
    private Timer? DebounceTimer { get; set; }
    private int DebounceDelay => 300; 

    [CascadingParameter(Name = "ValidationWrapper.IsValid")]
    public bool? IsValid { get; set; }

    private string InputClassName => ClassName(css =>
    {
        css.Add("rw-block rw-w-full rw-rounded-md rw-py-1.5 rw-text-gray-900 dark:rw-text-white dark:rw-bg-white/5 rw-shadow-sm rw-ring-1 rw-ring-inset placeholder:rw-text-gray-400 focus:rw-ring-2 focus:rw-ring-inset focus:rw-ring-indigo-600 sm:rw-text-sm sm:rw-leading-6");
        // css.Add("border-1 border-red-500 dark:border-red-500 ring-red-500 dark:ring-red-500", IsValid.HasValue && !IsValid.Value);
        css.Add("rw-border-0 rw-ring-gray-300 dark:rw-ring-white/10 ");
    });

    
    private void OnInputChange(ChangeEventArgs e)
    {
        // Stop any existing timer
        DebounceTimer?.Dispose();

        // Start a new timer
        DebounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(() => UpdateValues(e)); // Call your API or search function
        }, null, DebounceDelay, Timeout.Infinite);
    }

    private void UpdateValues(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        ValueChanged.InvokeAsync(Value);
    }

}