@inherits Railwind.Common.RailwindBaseComponent

<div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="block text-sm font-medium leading-6 dark:text-white text-gray-900">@Label</label>
    }
    <div class="mt-2">
        <input type="@InputType"
               id="@Id"
               @oninput="OnInputChange"
               placeholder="@Placeholder"
               class="@InputClassName">
    </div>
    @if (!string.IsNullOrWhiteSpace(Description))
    {
        <p class="mt-2 text-sm dark:text-white/90 text-gray-500" id="@($"{Id}-description")">@Description</p>
    }
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public string InputType { get; set; } = "text";
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public string Placeholder { get; set; } = string.Empty;

    [CascadingParameter(Name = "ValidationWrapper.IsValid")]
    public bool? IsValid { get; set; }

    private string InputClassName => ClassName(css =>
    {
        css.Add("block w-full rounded-md py-1.5 text-gray-900 dark:text-white dark:bg-white/5 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6");
        // css.Add("border-1 border-red-500 dark:border-red-500 ring-red-500 dark:ring-red-500", IsValid.HasValue && !IsValid.Value);
        css.Add("border-0 ring-gray-300 dark:ring-white/10 ");
    });

    private void OnInputChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? "";
        ValueChanged.InvokeAsync(Value);
    }

}