@typeparam TAccount
@typeparam TChat

@inject RailChatHubListener<TAccount, TChat> RailChatHubListener
@implements IAsyncDisposable

<CascadingValue Value="OnMessageReceived">
    @ChildContent
</CascadingValue>

@code {

    [Parameter] public EventCallback<MessagePayload<TAccount, TChat>> OnMessageReceived { get; set; }

    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RailChatHubListener.InitializeHubConnectionAsync();
        
        // every time signalr receives a message, we will call HandleMessageReceived
        RailChatHubListener.OnMessageReceived += HandleMessageReceived;
    }

    private void HandleMessageReceived(MessagePayload<TAccount, TChat> message)
    {
        // then invoke all subscribed objects to receive the message
        OnMessageReceived.InvokeAsync(message);
    }

    public async ValueTask DisposeAsync()
    {
        RailChatHubListener.OnMessageReceived -= HandleMessageReceived;
        
        await RailChatHubListener.DisposeAsync();
    }

}