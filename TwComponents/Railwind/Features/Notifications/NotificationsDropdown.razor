@using Railwind.Common.Constants
@using Railwind.Common.Enums
@using Railwind.Components
@typeparam TData
@inherits Railwind.Common.RailwindBaseComponent

<Dropdown @ref="_notificationsDropdown">
    <ButtonContent>
        @if (DropdownButtonContent != null)
        {
            @DropdownButtonContent
        }
        else
        {
            <div class="cursor-pointer mr-5 relative" @onclick="HandleToggleDropdown">
                <i class="@($"{Icons.NOTIFICATION} text-2xl font-semibold leading-6 text-white hover:text-indigo-500")"></i>

                @if (Notifications.Count > 0)
                {
                    <span
                        class="absolute -top-2 -right-1 h-4 w-4 bg-red-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-semibold text-xs">@Notifications.Count</span>
                     </span>
                }
            </div>
        }

    </ButtonContent>
    <DropdownContent>
        <div
            class="flex flex-col rounded-lg shadow-lg ring-1 ring-stone-950 ring-opacity-5 focus:outline-none -right-[4.25rem] md:right-1 max-h-[24rem] md:max-h-[32rem] min-h-[16rem] md:min-w-[24rem] min-w-[335px]  absolute z-10 mt-2 
                origin-top-right bg-stone-900 border-b border-stone-800 pb-4">

            <!-- Header Start -->
            <div class=" flex px-4 pt-5 items-center justify-between">
                <div class="flex flex-row items-center gap-x-2">
                    <span class="inline-flex h-8 w-8 items-center justify-center ">
                        <i class="@($"{Icons.NOTIFICATION} text-2xl text-white")"></i>
                    </span>
                    <div>
                        <p class="font-bold text-white">Notifications</p>
                        <p class="text-xs text-gray-100">See listed below</p>
                    </div>
                </div>
                <div class="">
                    <button type="button"
                            @onclick="HandleToggleDropdown"
                            class="rounded bg-white/10 px-2 py-1 text-sm font-semibold flex items-center text-white shadow-sm hover:bg-white/20">
                        <i class="@($"{Icons.CROSS} text-xl")"/>
                    </button>
                </div>
            </div>
            <!-- Header End -->

            <!-- Notifications Group Start -->
            <div class="overflow-y-auto flex-grow">
                @foreach (var data in Notifications)
                {
                    <!-- Notification Start -->
                    <div class="flex flex-1 flex-grow flex-col gap-y-4 px-4 py-5 ">
                        <div class="flex justify-between items-center">
                            <div class="flex flex-row gap-x-2 items-center">
                                @switch (GetNotificationType(Type(data)))
                                {
                                    case NotificationsDropdownType.Info:
                                        <span
                                            class="inline-flex h-6 w-6 items-center justify-center flex-shrink-0 rounded-full bg-stone-500">
                                            <i class="@($"{Icons.INFORMATION_2} text-white text-lg")"/>
                                        </span>
                                        break;
                                    case NotificationsDropdownType.Warning:
                                        <span
                                            class="inline-flex h-6 w-6 items-center justify-center flex-shrink-0 rounded-full bg-amber-500">
                                            <i class="@($"{Icons.INFORMATION_5} text-white text-lg")"/>
                                        </span>
                                        break;
                                    case NotificationsDropdownType.Error:
                                        <span
                                            class="inline-flex h-6 w-6 items-center justify-center flex-shrink-0 rounded-full bg-red-500">
                                            <i class="@($"{Icons.INFORMATION_3} text-white text-lg")"/>
                                        </span>
                                        break;
                                    case NotificationsDropdownType.Success:
                                        <span
                                            class="inline-flex h-6 w-6 items-center justify-center flex-shrink-0 rounded-full bg-green-500">
                                            <i class="@($"{Icons.CHECK} text-white text-lg")"/>
                                        </span>
                                        break;
                                }

                                <div class="flex flex-col space-y-1">
                                    <div class="flex justify-between items-center">
                                        <p class="text-white text-sm font-bold">@Title(data)</p>
                                        <p class="text-gray-400 text-xs">@NotificationTime(data)</p>
                                    </div>
                                    <p class="text-gray-300 text-xs text-wrap">@Description(data)</p>
                                </div>
                            </div>
                            <div>
                                <button type="button"
                                        @onclick="() => HandleMarkAsReadClicked(data)"
                                        class="rounded bg-white/10 px-2 py-1 text-sm font-semibold text-white shadow-sm hover:bg-white/20">
                                    <i class="@($"{Icons.CHECK} text-white text-lg")"/>
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- Notification End -->
                }
            </div>
            <!-- Notifications Group End -->

            <!-- No Notifications Start -->
            @if (!Notifications.Any())
            {
                <div
                    class="flex flex-1 flex-grow flex-col justify-center items-center  gap-y-4 px-4 py-5">
                    <div class="flex items-center justify-center">
                        <div class="flex flex-row items-center gap-x-2">
                            <span class="flex items-center justify-center ">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                     stroke-width="1.5"
                                     stroke="currentColor" class="h-8 w-8 text-white">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                          d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"/>
                                </svg>
                            </span>
                            <div class="">
                                <p class="font-bold text-white ">No notifications</p>
                                <p class="text-xs text-gray-300 ">Notifications will appear here</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <!-- No Notifications End -->

            <!-- Footer Start -->
            @if (OnMarkAllAsReadClicked.HasDelegate || OnViewAllClicked.HasDelegate)
            {
                <div class="@FooterClassName">
                    @if (OnMarkAllAsReadClicked.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleMarkAllAsReadClicked"
                                class="rounded bg-white/10 px-2 py-1 text-sm font-semibold flex items-center gap-x-1 text-white shadow-sm hover:bg-white/20">
                            Mark All As Read
                        </button>
                    }

                    @if (OnViewAllClicked.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleViewAllClicked"
                                class="rounded bg-white/10 px-2 py-1 text-sm font-semibold flex items-center gap-x-1 text-white shadow-sm hover:bg-white/20">
                            View All
                        </button>
                    }
                </div>
            }
            <!-- Footer End -->
        </div>
    </DropdownContent>
</Dropdown>


@code {
    private Dropdown _notificationsDropdown = null!;

    [Parameter] public EventCallback<List<TData>> OnMarkAllAsReadClicked { get; set; }
    [Parameter] public EventCallback OnViewAllClicked { get; set; }
    [Parameter] public EventCallback<TData> OnMarkAsReadClicked { get; set; }

    [Parameter] public List<TData> Notifications { get; set; } = [];

    [Parameter, EditorRequired] public required Func<TData, object?> Title { get; set; }
    [Parameter, EditorRequired] public required Func<TData, object?> NotificationTime { get; set; }
    [Parameter, EditorRequired] public required Func<TData, object?> Description { get; set; }
    [Parameter, EditorRequired] public required Func<TData, object?> Type { get; set; }
    [Parameter, EditorRequired] public required Dictionary<object, NotificationsDropdownType> TypeMapping { get; set; }

    /// <summary>
    /// Optional content for the dropdown button instead of the basic default
    /// </summary>
    [Parameter]
    public RenderFragment? DropdownButtonContent { get; set; }

    private string FooterClassName => ClassName(css =>
    {
        css.Add("flex px-4 py-5  border-t border-stone-800");
        css.Add("justify-between", OnMarkAllAsReadClicked.HasDelegate && OnViewAllClicked.HasDelegate);
        css.Add("justify-end", (OnMarkAllAsReadClicked.HasDelegate && OnViewAllClicked.HasDelegate) == false);
    });

    public void HandleToggleDropdown() => _notificationsDropdown.Toggle();

    private void HandleMarkAllAsReadClicked()
    {
        if (!OnMarkAllAsReadClicked.HasDelegate) return;

        OnMarkAllAsReadClicked.InvokeAsync(Notifications);
    }

    private void HandleViewAllClicked()
    {
        if (!OnViewAllClicked.HasDelegate) return;

        OnViewAllClicked.InvokeAsync();
    }

    private void HandleMarkAsReadClicked(TData data)
    {
        if (!OnMarkAsReadClicked.HasDelegate) return;

        OnMarkAsReadClicked.InvokeAsync(data);
    }

    private NotificationsDropdownType GetNotificationType(object? data)
    {
        if (data is null) return NotificationsDropdownType.Info;

        return TypeMapping.GetValueOrDefault(data, NotificationsDropdownType.Info);
    }


}